{"version":3,"sources":["components/Card/index.js","components/Wrapper/index.js","components/Title/index.js","App.js","index.js"],"names":["Card","props","className","onClick","handleClick","id","alt","name","src","image","Wrapper","children","Title","clickedItems","App","state","objects","score","topScore","checkArray","console","log","indexOf","push","handleGameOver","setState","alert","handleShuffle","sort","a","b","Math","random","this","map","friend","key","occupation","location","Component","ReactDOM","render","document","getElementById"],"mappings":"sxEAiBeA,MAdf,SAAcC,GACZ,OACE,yBAAKC,UAAU,QACb,yBAAKA,UAAU,gBAAgBC,QAAS,kBAAMF,EAAMG,YAAYH,EAAMI,MACpE,yBAAKC,IAAKL,EAAMM,KAAMC,IAAKP,EAAMQ,W,MCA1BC,MAJf,SAAiBT,GACf,OAAO,yBAAKC,UAAU,WAAWD,EAAMU,W,MCG1BC,MAJf,SAAeX,GACb,OAAO,wBAAIC,UAAU,SAASD,EAAMU,W,OCMlCE,EAAe,GA4FJC,E,2MAvFbC,MAAQ,CACNC,UACAC,MAAO,EACPC,SAAU,G,EAGZC,WAAa,SAAAd,GAGX,GAFAe,QAAQC,IAAI,SAAWhB,IAEW,IAA9BQ,EAAaS,QAAQjB,GAAY,CAMnC,GALAQ,EAAaU,KAAKlB,GAClBe,QAAQC,IAAIR,GACZ,EAAKE,MAAME,QAEXG,QAAQC,IAAI,UAAY,EAAKN,MAAME,SAC/B,EAAKF,MAAME,MAAQ,EAAKF,MAAMG,UAIhC,OAAO,EAAKH,MAAMG,SAHlB,EAAKH,MAAMG,gBAOb,EAAKM,kB,EAWTA,eAAiB,WAGf,EAAKC,SAAS,CAAER,MAAO,IACrB,WACEG,QAAQC,IAAI,EAAKN,MAAME,UAE3BJ,EAAe,GACfa,MAAM,a,EAGRC,cAAgB,WAKd,EAAKF,SAAS,CACZT,QAAS,EAAKD,MAAMC,QAAQY,MAAK,SAASC,EAAGC,GAC3C,MAAO,GAAMC,KAAKC,e,EAKxB5B,YAAc,SAAAC,GACZe,QAAQC,IAAI,oBAAqBhB,GACjC,EAAKc,WAAWd,GAChB,EAAKsB,cAActB,I,wEAIX,IAAD,OACP,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,oBACA,yBAAKH,UAAU,YAAW,qCAAW+B,KAAKlB,MAAME,QAChD,yBAAKf,UAAU,YAAW,yCAAe+B,KAAKlB,MAAMG,WACnDe,KAAKlB,MAAMC,QAAQkB,KAAI,SAAAC,GAAM,OAC5B,kBAAC,EAAD,CACE/B,YAAa,EAAKA,YAClBC,GAAI8B,EAAO9B,GACX+B,IAAKD,EAAO9B,GACZE,KAAM4B,EAAO5B,KACbE,MAAO0B,EAAO1B,MACd4B,WAAYF,EAAOE,WACnBC,SAAUH,EAAOG,mB,GAhFXC,aCPlBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.6a5b955e.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction Card(props) {\n  return (\n    <div className=\"card\">\n      <div className=\"img-container\" onClick={() => props.handleClick(props.id)}>\n        <img alt={props.name} src={props.image} />\n      </div>\n\n      {/* <span onClick={() => props.removeFriend(props.id)} className=\"remove\">\n        ùòÖ\n      </span> */}\n    </div>\n  );\n}\n\nexport default Card;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Title(props) {\n  return <h1 className=\"title\">{props.children}</h1>;\n}\n\nexport default Title;\n","import React, { Component } from \"react\";\nimport Card from \"./components/Card\";\nimport Wrapper from \"./components/Wrapper\";\nimport Title from \"./components/Title\";\nimport objects from \"./objects.json\";\n\n// let score = 0;\n// let topScore = 0;\n\n//array of clicked items with their ids\nlet clickedItems = [];\n\n\nclass App extends Component {\n  // Setting this.state.friends to the friends json array\n  state = {\n    objects,\n    score: 0,\n    topScore: 0\n  };\n\n  checkArray = id => {\n    console.log(\"check:\" + id);\n    // clickedItems.indexOf(id);\n    if (clickedItems.indexOf(id) === -1) {\n      clickedItems.push(id);\n      console.log(clickedItems);\n      this.state.score ++;\n      // this.setState({count: this.state.score++})\n      console.log(\"Score: \" + this.state.score);\n      if (this.state.score > this.state.topScore) {\n        this.state.topScore ++;\n\n      } else {\n        return this.state.topScore;\n      }\n\n    } else {\n      this.handleGameOver();\n    }\n    //see if id matches any ids in the clicked array\n    //if the id is in the clicked array, handle game over\n    //if the id is not in the array, push the id to the array\n      //increase score by 1\n\n    //call the handle Shufflefuntion\n\n  }\n\n  handleGameOver = () => {\n    //reset everything to 0, clear state\n    //check the total score, if higher, update\n    this.setState({ score: 0 }, \n      () => {\n        console.log(this.state.score);\n      });\n    clickedItems = [];\n    alert(\"You lose\")\n  }\n\n  handleShuffle = () => {\n    //for loop => go through the array and shuffle => return the array\n    //google this\n    \n    //set the state to the new shuffled object\n    this.setState({\n      objects: this.state.objects.sort(function(a, b){\n        return 0.5 - Math.random()\n      })\n    })\n  }\n\n  handleClick = id => {\n    console.log(\"I've been clicked\", id);\n    this.checkArray(id);\n    this.handleShuffle(id);\n  };\n\n  // Map over this.state.friends and render a FriendCard component for each friend object\n  render() {\n    return (\n      <Wrapper>\n        <Title>Clicky Game</Title>\n        <div className=\"col-lg-6\"><p>Score: {this.state.score}</p></div>\n        <div className=\"col-lg-6\"><p>Top Score: {this.state.topScore}</p></div>\n        {this.state.objects.map(friend => (\n          <Card\n            handleClick={this.handleClick}\n            id={friend.id}\n            key={friend.id}\n            name={friend.name}\n            image={friend.image}\n            occupation={friend.occupation}\n            location={friend.location}\n          />\n        ))}\n        \n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}